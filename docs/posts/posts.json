[
  {
    "path": "posts/2021-11-17-cest-une-pipe/",
    "title": "C'est une pipe.",
    "description": "What exactly is Magrittr's Pipe?",
    "author": [
      {
        "name": "Logan Piepmeier",
        "url": {}
      }
    ],
    "date": "2021-11-26",
    "categories": [],
    "contents": "\nWhat is a pipe in R?\nThe %>% pipe has become pretty ubiquitous in R, especially with the rise of the Tidyverse packages. If you’re not familiar with it, just know that a pipe allows you to write your commands in a different (and often more natural) order. Using dplyr’s filter function on the well-known iris data set: filter(iris, species == \"Setosa\") can be rewritten iris %>% filter(species == \"Setosa\") using a pipe. This may not seem more natural at first, but its utility becomes more obvious when writing chains of several commands.\nFor another dplyr / iris example, we may want to use dplyr to find the mean Sepal.Width to Sepal.Length ratio for each species in the iris data set. We could do this in a single command with:\n\n\nsummarize(group_by(mutate(iris, sepal_ratio = Sepal.Width / Sepal.Length), Species), mean_sepal_ratio = mean(sepal_ratio))\n\n\n# A tibble: 3 x 2\n  Species    mean_sepal_ratio\n  <fct>                 <dbl>\n1 setosa                0.684\n2 versicolor            0.468\n3 virginica             0.453\n\nEven if you know dplyr well, it likely took a few passes to understand that line. Pipes (IMHO) make this much more readable.\n\n\niris %>%\n  mutate(sepal_ratio = Sepal.Width / Sepal.Length) %>%\n  group_by(Species) %>%\n  summarize(mean_sepal_ratio = mean(sepal_ratio))\n\n\n# A tibble: 3 x 2\n  Species    mean_sepal_ratio\n  <fct>                 <dbl>\n1 setosa                0.684\n2 versicolor            0.468\n3 virginica             0.453\n\nPipes let you write functions in the order you might verbally explain what the code is doing. That’s useful!\nThis pattern in R is borrowed from other, more object-oriented, programming languages’ concept of “method chaining”. R’s pipes aren’t quite the same thing, because we’re still in the world of functional rather than object-oriented programming, but maybe I’ll return to that difference in another post.\nNo, but what is a pipe in R?\n%>%, like the familiar %in%, is a special function (and by that I mean that’s what it’s called). In particular, both %in% and %>% are “infix functions”. Like their linguistic namesake, they go in between objects to modify the meaning of a statement. In English, infix is almost always impolite or informal. Think “Absolutely” becoming “abso-fucking-lutely!” and “another” becoming “a-whole-nother”.\nStaying with that familiar %in% for a moment, you can actually see that it’s secretly a normal old function under the hood. Here is the typical use of %in%:\n\n\nc(1,2,3) %in% c(2,3,4)\n\n\n[1] FALSE  TRUE  TRUE\n\nBut we can also use it this way:\n\n\n`%in%`(c(1,2,3), c(2,3,4))\n\n\n[1] FALSE  TRUE  TRUE\n\nSo %in% can actually be used with the function(x,y) syntax we’re used to. Play around with R and you’ll find many very basic operations work this way when wrapped in backticks:\n\n\n`+`(1,1) # Addition\n\n\n[1] 2\n\n\n\n`%%`(5, 3) # Modulo\n\n\n[1] 2\n\n\n\n`^`(2, 3) # Exponentiation \n\n\n[1] 8\n\nYou can even define your own infix function by defining a two-argument function and wrapping its name in “% %”. Just use the backticks when defining it.\n\n\n`%my_very_own_plus_sign%` <- function(x,y){ x + y }\n2 %my_very_own_plus_sign% 2\n\n\n[1] 4\n\nAs an aside, R lets you define infix functions with any number of arguments. They just ignore any additional arguments if you provide more than two, or crash on execution if you define fewer.\nAs you’ve surely guessed by now, you can also call the pipe with this syntax (although its pretty clunky to do so).\n\n\n`%>%`('this is', paste('my example'))\n\n\n[1] \"this is my example\"\n\nThere’s no reason to actually call infix functions this way. That defeats their purpose as convenient, more readable ways to structure your R code.\nYeah but what is a pipe really?\nOk, so the %>% pipe is an infix function. But I still don’t know how it actually does what it does! And really, as I write this, I have no idea how it works. We are in this together.\nWell, at a basic level, we can just ask R what it is.\n\n\n`%>%`\n\n\nfunction (lhs, rhs) \n{\n    lhs <- substitute(lhs)\n    rhs <- substitute(rhs)\n    kind <- 1L\n    env <- parent.frame()\n    lazy <- TRUE\n    .External2(magrittr_pipe)\n}\n<bytecode: 0x7fd9484f2b70>\n<environment: namespace:magrittr>\n\nLet’s go line-by-line.\nIt’s a function of two variables – we knew that.\nThe function calls substitute on each argument. According to the docs, substitute “returns the parse tree for the (unevaluated) expression expr, substituting any variables bound in env”. That’s… not helpful. I’ve explored a bit and found substitute returns a name object for its argument.\nIt sets kind to integer 1. But… kind doesn’t seem to be referenced again.\nenv is parent.frame. I remember parent.frame from Hadley’s Advanced R. It refers to the environment of variable outside of the function (in the environment where the function was called). However, this also doesn’t get referred to again.\nlazy <- TRUE. I mean, I get that. But again, lazy doesn’t show up again.\n.External2(magrittr_pipe). I think we have reached the crux of this problem. There does not appear to be a variable called magrittr_pipe in this function, and ??magrittr_pipe doesn’t have any results in R. Calling help(.External2) points to .External (thanks, R docs). help(.External) tells me that this function is “to pass R objects to compiled C/C++ code that has been loaded into R.”\nUh oh, C code. To a high-level coder like me, this is the part of the map that reads “here be dragons”. I hope to be brave enough to explore this territory in a future post.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-11-27T08:33:18-05:00",
    "input_file": "cest-une-pipe.knit.md"
  },
  {
    "path": "posts/2021-11-17-initial-commit/",
    "title": "Initial Commit",
    "description": "Hello World.",
    "author": [
      {
        "name": "Logan Piepmeier",
        "url": {}
      }
    ],
    "date": "2021-11-17",
    "categories": [],
    "contents": "\nHere we go! I’m Logan, a research consultant at the University of Washington. I’m planning to use this site to share tools (mostly in R) that interest me and to talk about working with data more generally.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-11-17T08:06:38-05:00",
    "input_file": {}
  }
]
